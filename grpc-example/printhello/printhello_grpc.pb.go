// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: printhello.proto

package printhelloPB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrintHello_PrintHello_FullMethodName = "/printhelloPB.PrintHello/PrintHello"
)

// PrintHelloClient is the client API for PrintHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrintHelloClient interface {
	PrintHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HelloResponse, error)
}

type printHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewPrintHelloClient(cc grpc.ClientConnInterface) PrintHelloClient {
	return &printHelloClient{cc}
}

func (c *printHelloClient) PrintHello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, PrintHello_PrintHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrintHelloServer is the server API for PrintHello service.
// All implementations should embed UnimplementedPrintHelloServer
// for forward compatibility
type PrintHelloServer interface {
	PrintHello(context.Context, *emptypb.Empty) (*HelloResponse, error)
}

// UnimplementedPrintHelloServer should be embedded to have forward compatible implementations.
type UnimplementedPrintHelloServer struct {
}

func (UnimplementedPrintHelloServer) PrintHello(context.Context, *emptypb.Empty) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintHello not implemented")
}

// UnsafePrintHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrintHelloServer will
// result in compilation errors.
type UnsafePrintHelloServer interface {
	mustEmbedUnimplementedPrintHelloServer()
}

func RegisterPrintHelloServer(s grpc.ServiceRegistrar, srv PrintHelloServer) {
	s.RegisterService(&PrintHello_ServiceDesc, srv)
}

func _PrintHello_PrintHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintHelloServer).PrintHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrintHello_PrintHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintHelloServer).PrintHello(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PrintHello_ServiceDesc is the grpc.ServiceDesc for PrintHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrintHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "printhelloPB.PrintHello",
	HandlerType: (*PrintHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrintHello",
			Handler:    _PrintHello_PrintHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "printhello.proto",
}
